{%- macro targetPlayerParam(ability, defaultTarget=null) -%}
{%- if ability.targetPlayer and ability.targetPlayer !== defaultTarget -%}
    {%- if ability.targetPlayer === 'self' -%}
target: context.player
    {%- else -%}
target: context.player.opponent
    {%- endif -%}
{%- endif -%}
{%- endmacro -%}

{%- macro allTargetParam(target) -%}
{%- if target != null and target.mode == "all" -%}
target: context.game.{{target.type}}sInPlay{{cardFilter(target)}}
{%- endif -%}
{%- endmacro -%}

{%- macro amountParam(ability) -%}
{%- if ability.amount != null -%}
amount: {{ability.amount}}
{%- endif -%}
{%- endmacro -%}

{%- macro formatParams(ability, defaultPlayerTarget=null) -%}
{%- set params = ([
    allTargetParam(ability.target),
    amountParam(ability),
    targetPlayerParam(ability, defaultPlayerTarget)
] | selectattr("length", "equalto", 0)) -%}{# selectattr/rejectattr seem to do the opposite of what the docs say? #}
    {%- if params.length > 0 -%}
        {%- if (params | join()).includes("context") -%}
(context) => ({
    {{ params | join(",\n") | indent(4) | safe }}
})
        {%- else -%}
{ {{ params | join(",\n") | indent(4) | safe}} }
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

{%- macro singleCondition(condition) -%}
    {%- if condition.name == "not" -%}
!{{singleCondition(condition.condition)}}
    {%- elif condition.name == "trait" -%}
card.hasTrait('{{condition.trait}}')
    {%- elif condition.name == "house" -%}
card.hasHouse('{{condition.house}}')
    {%- elif condition.name == "flank" -%}
card.isOnFlank()
    {%- elif condition.name == "damaged" -%}
card.hasToken('damage')
    {%- elif condition.name == "other" -%}
card !== context.source
    {%- else -%}
/*{{ effect | dump(2) | safe}}*/
    {%- endif -%}
{%- endmacro -%}

{%- macro cardCondition(effect) -%}
{%- set l = [] -%}
{%- if effect.name == 'use' -%} {# Is this required, or inbuilt anyway? #}
    {%- set l = l.concat(['card.exhausted === false']) -%}
{%- endif -%}
{%- for c in effect.target.conditions -%}
    {%- set l = l.concat(singleCondition(c)) -%}
{%- endfor -%}
{%- if l.length > 0 -%}
cardCondition: (card) => {{ l | join(' && ') | safe }},
{% endif -%}
{%- endmacro -%}

{%- macro controllerCondition(target) -%}
card.controller {{'===' if target.controller === 'you' else '!==' |safe }} context.player
{%- endmacro -%}

{%- macro cardFilter(target) -%}
{%- set l = [] -%}
{%- if target.controller != null -%}
    {%- set l = l.concat(controllerCondition(target)) -%}
{%- endif -%}
{%- for c in target.conditions -%}
    {%- set l = l.concat(singleCondition(c)) -%}
{%- endfor -%}
{%- if l.length > 0 -%}
.filter(
    (card) => {{ l | join(' && ') | safe }}
) 
{%- endif -%}
{%- endmacro -%}

{%- macro formatSingleEffect(effect) -%}
    {%- if ['gainAmber','stealAmber','gainChains'].includes(effect.name) -%}
ability.actions.{{effect.name}}({{ formatParams(effect, defaultPlayerTarget='you') }})
    {%- elif ['loseAmber'].includes(effect.name) -%}{#Convert these to dictionary of default targets by effect #}
ability.actions.loseAmber({{ formatParams(effect, defaultPlayerTarget='opponent') }})
    {%- elif effect.name == 'readyAndUse' -%}
ability.actions.sequential([
    ability.actions.ready(),
    ability.actions.use()
])
    {%- elif effect.name == 'readyAndFight' -%}
ability.actions.sequential([
    ability.actions.ready(),
    ability.actions.fight()
])
    {%- else -%}
ability.actions.{{effect.name}}({{formatParams(effect)}})
    {%- endif -%}
{%- endmacro -%}

{%- macro formatEffect(effect) -%}
{%- if effect.name != null -%}
gameAction: {{ formatSingleEffect(effect) }}
{%- else -%}
gameAction: [
    {%- for e in effect %}
    {{ formatSingleEffect(e) | indent(4) }}{% if not loop.last %},{% endif %}
    {%- endfor %}
]
{%- endif %}
{%- endmacro -%}

{%- macro formatTarget(effect) -%}
{%- if effect.target.type != null -%}
cardType: '{{effect.target.type}}',
{% endif -%}
{%- if effect.target.controller != null -%}
controller: '{{effect.target.controller}}',
{% endif -%}
{{ cardCondition(effect) | safe }}
{%- endmacro -%}

{%- macro formatAbility(ability) -%}
{%- if (ability.name == 'bold') -%}
this.{{ability.trigger}}({

    {%- for extraTrigger in ability.extraTriggers %}
    {{extraTrigger | lower}}: true,
    {%- endfor %}

    {%- if ability.effect.target != null 
        and ability.effect.target.mode != "all" %}{# Targetted ability #}
    target: {
        {{formatTarget(ability.effect) | indent(8) -}}
        {{formatEffect(ability.effect) | indent(8)}}
    }
    {%- else %}{# Untargeted ability #}
    {{ formatEffect(ability.effect) | indent(4)}}
    {%- endif %}
});
{%- elif ability.name == 'keywords' -%}
//Keywords: {{ ability.keywords.join(", ") }}
{%- else -%}
/*{{ ability | dump(2) | safe}}*/
{%- endif -%}
{%- endmacro -%}

const Card = require('../../Card.js');

class {{ name }} extends Card {
    setupCardAbilities(ability) {
        {%- for ability in abilities %}
        {{formatAbility(ability) | indent(8)}}
        {%- endfor %}
    }
}

{{name}}.id = '{{card.id}}';

module.exports = {{name}};
