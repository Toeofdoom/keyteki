{%- macro playerAbilityParams(ability, defaultTarget=null) -%}
    {%- if ability.targetPlayer and ability.targetPlayer !== defaultTarget -%}
(context) => ({
        {%- if ability.targetPlayer === 'self' -%}
    target: context.player,
        {%- else -%}
    target: context.player.opponent,
        {%- endif -%}
    amount: {{ability.quantity}}
})
    {%- else -%}
{{ability.quantity}}
    {%- endif -%}
{%- endmacro -%}

{%- macro allTargetParam(target) -%}
    {%- if target != null -%}
target: context.game.{{target.type}}sInPlay{{cardFilter(target)}}
    {%- endif -%}
{%- endmacro -%}

{%- macro amountParam(ability) -%}
    {%- if ability.quantity != null -%}
amount: {{ability.quantity}}
    {%- endif -%}
{%- endmacro -%}

{%- macro cardAbilityParams(ability, target=null) -%}
{%- set params = ([
    allTargetParam(target),
    amountParam(ability)
] | selectattr("length", "equalto", 0)) -%}{# selectattr/rejectattr seem to do the opposite of what the docs say? #}
    {%- if params.length > 0 -%}
        {%- if (params | join()).includes("context") -%}
(context) => ({
    {{ params | join(",\n") | indent(4) | safe }}
})
        {%- else -%}
{ {{ params | join(",\n") | indent(4) | safe}} }
        {%- endif -%}
    {%- endif -%}
{%- endmacro -%}

{%- macro singleCondition(condition) -%}
    {%- if condition.name == "not" -%}
!{{singleCondition(condition.condition)}}
    {%- elif condition.name == "trait" -%}
card.hasTrait('{{condition.trait}}')
    {%- elif condition.name == "house" -%}
card.hasHouse('{{condition.house}}')
    {%- else -%}
/*{{ effect | dump(2) | safe}}*/
    {%- endif -%}
{%- endmacro -%}

{%- macro cardCondition(effect) -%}
{%- set l = [] -%}
{%- if effect.name == 'use' -%} {# Is this required, or inbuilt anyway? #}
    {%- set l = l.concat(['card.exhausted === false']) -%}
{%- endif -%}
{%- for c in effect.target.conditions -%}
    {%- set l = l.concat(singleCondition(c)) -%}
{%- endfor -%}
{%- if l.length > 0 -%}
cardCondition: (card) => {{ l | join(' && ') | safe }},
{% endif -%}
{%- endmacro -%}

{%- macro controllerCondition(target) -%}
card.controller {{'===' if target.controller === 'you' else '!==' |safe }} context.player
{%- endmacro -%}

{%- macro cardFilter(target) -%}
{%- set l = [] -%}
{%- if target.controller != null -%}
    {%- set l = l.concat(controllerCondition(target)) -%}
{%- endif -%}
{%- for c in target.conditions -%}
    {%- set l = l.concat(singleCondition(c)) -%}
{%- endfor -%}
{%- if l.length > 0 -%}
.filter(
    (card) => {{ l | join(' && ') | safe }}
) 
{%- endif -%}
{%- endmacro -%}

{%- macro effectMacro(effect, target=null) -%}
{{ cardCondition(effect) | safe }}
    {%- if effect.name == 'gainAmber' -%}
gameAction: ability.actions.gainAmber({{ playerAbilityParams(effect, defaultTarget='you') }})
    {%- elif effect.name == 'captureAmber' -%}
gameAction: ability.actions.capture({{ playerAbilityParams(effect, defaultTarget='you') }})
    {%- elif effect.name == 'stealAmber' -%}
gameAction: ability.actions.steal({{ playerAbilityParams(effect, defaultTarget='you') }})
    {%- elif effect.name == 'loseAmber' -%}
gameAction: ability.actions.loseAmber({{ playerAbilityParams(effect, defaultTarget='opponent') }})
    {%- elif effect.name == 'dealDamage' -%}
gameAction: ability.actions.dealDamage({{cardAbilityParams(effect, target)}})
    {%- elif effect.name == 'destroy' -%}
gameAction: ability.actions.destroy({{cardAbilityParams(effect, target)}})
    {%- elif effect.name == 'purge' -%}
gameAction: ability.actions.purge({{cardAbilityParams(effect, target)}})
    {%- elif effect.name == 'use' -%}
gameAction: ability.actions.use({{cardAbilityParams(effect, target)}})
    {%- elif effect.name == 'ready' -%}
gameAction: ability.actions.ready({{cardAbilityParams(effect, target)}})
    {%- elif effect.name == 'readyAndUse' -%}
gameAction: ability.actions.sequential([
    ability.actions.ready(),
    ability.actions.use()
])
    {%- elif effect.name == 'readyAndFight' -%}
gameAction: ability.actions.sequential([
    ability.actions.ready(),
    ability.actions.fight()
])
    {%- else -%}
        /*{{ effect | dump(2) | safe}}*/
    {%- endif -%}
{%- endmacro -%}

{%- macro targetMacro(target) -%}
{%- if target.type != null -%}
cardType: '{{target.type}}',
{% endif -%}
{%- if target.controller != null -%}
controller: '{{target.controller}}',
{% endif -%}
{%- endmacro -%}

{%- macro abilityMacro(ability) -%}
    {%- if (ability.name == 'bold') -%}
        {%- if ability.trigger == 'Reap' -%}
this.reap({
        {%- elif ability.trigger == 'Fight' -%}
this.fight({
        {%- elif ability.trigger == 'Destroyed' -%}
this.destroyed({
        {%- elif ability.trigger == 'Play'-%}
this.play({
        {%- elif ability.trigger == 'Omni'-%}
this.omni({
        {%- elif ability.trigger == 'Before Fight'-%}
this.beforeFight({
        {%- elif ability.trigger == 'Action'-%}
this.action({
        {%- else -%}
this.unknown( //{{ ability.trigger }}
        {%- endif %}
        {%- for extraTrigger in ability.extraTriggers %}
    {{extraTrigger | lower}}: true,
        {%- endfor %}
    {%- if ability.effect.target != null %}
        {%- if ability.effect.target.mode == "all" %}
    {{effectMacro(ability.effect, ability.effect.target) | indent(4)}}
        {%- else %}
    target: {
        {{targetMacro(ability.effect.target) | indent(8) -}}
        {{effectMacro(ability.effect) | indent(8)}}
    }
        {%- endif %}
    {%- else %}
    {{ effectMacro(ability.effect) | indent(4)}}
    {%- endif %}
});
    {%- elif ability.name == 'keywords' -%}
//Keywords: {{ ability.keywords.join(", ") }}
    {%- else -%}
        /*{{ ability | dump(2) | safe}}*/
    {%- endif -%}
{%- endmacro -%}

const Card = require('../../Card.js');

class {{ name }} extends Card {
    setupCardAbilities(ability) {
        {%- for ability in abilities %}
        {{abilityMacro(ability) | indent(8)}}
        {%- endfor %}
    }
}

{{name}}.id = '{{card.id}}';

module.exports = {{name}};
