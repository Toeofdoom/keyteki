{# Formats any type of ability#}
{%- macro formatAbility(ability) -%}
{%- if (ability.name == 'bold') -%}
this.{{ability.trigger}}({{boldAbility(ability)}});
{%- elif (ability.name == 'persistentEffect') -%}
    {%- if ability.target.mode == "upgradedCreature"-%}
this.whileAttached({{persistentEffect(ability)}});
    {%- else -%}
this.persistentEffect({{persistentEffect(ability)}});
    {%- endif -%}
{%- elif ability.name == 'reaction' -%}
this.reaction({
    {{formatReaction(ability) | indent(4)}}
});
{%- elif ability.name == 'keywords' -%}
//Keywords: {% for k in ability.keywords -%}
{{k.name}}{{" " + k.count if k.count != null}}{{", " if not loop.last}}
    {%- endfor %}
{%- else -%}
/*{{ ability | dump(2) }}*/
{%- endif -%}
{%- endmacro -%}

{# Bold abilities - these have simple triggers and often have targets. #}
{%- macro boldAbility(ability) -%}
{
{%- for extraTrigger in ability.extraTriggers %}
    {{extraTrigger | lower}}: true,
{%- endfor %}
    {{formatEffects(ability.effect) | indent(4)}}
}
{%- endmacro -%}

{# Persistent effects - WIP #}
{%- macro persistentEffect(ability) -%}
{
{%- if ability.effects[0].name.includes("entersPlay") %}
    location: 'any',
{%- endif -%}
{%- if ability.target != null and ability.target.controller == null and ability.target.mode == 'all' %}
    targetController: 'any',
{%- elif ability.target.controller == 'opponent' %}
    targetController: 'opponent',
{%- endif -%}
{%- set c = cardConditionInternal(ability.target, checkType=true) -%}
{%- if c.length > 0 %}
    match: (card{{", context" if c.includes("context") }}) => {{c}},
{%- endif %}
    effect: {{formatEffectArray(ability.effects) | indent(4) }}
}
{%- endmacro -%}

{# Upgrade effects - will probably be merged with persistent effects? #}
{%- macro upgradeAbility(ability) -%}
{
    effect: [
        {% set j = joiner(",\n"|indent(8)) -%}
{%- for effect in ability.gets -%}
        {{j()}}{{ formatSingleEffect(effect) | indent(8) }}
{%- endfor -%}
{%- for effect in ability.gains -%}
    {%- if effect.name == 'bold' -%}
        {{j()}}ability.effects.gainAbility('{{effect.trigger}}', {{ boldAbility(effect) | indent(8) }})
    {%- elif effect.name == 'keywords' -%}
        {{j()}}{{ gainKeywords(effect) | indent(8) }}
    {%- endif -%}
{%- endfor %}
    ]
}
{%- endmacro -%}

{# Sorts out effects that may be targetted or untargeted, sequential or interdependent. 

 The rule regarding resolving one sentence at a time, except for damage and replacement effects etc. is not implemented yet - and many existing cards don't follow it anyway. In particular, this doesn't generate any unconditional "thens" using alwaysTriggers #}
{%- macro formatEffects(effects, then = false) -%}
{%- set effectGroups = effects | sortEffects(then) -%}
{%- set j = joiner(",\n") -%}
{# Targetted effects #}
{%- if effectGroups.optional -%}
{{j()}}optional: true
{%- endif -%}
{%- if effectGroups.targets.length > 1 -%}
{{j()}}targets: {
{%- for target in effectGroups.targets %}
    {{- formatCondition(target) -}}
    target{{loop.index}}: {
        {{formatTarget(target) | indent(8) -}}
        gameAction: {{formatSingleEffect(target) | indent(8)}}
    }{{"," if not loop.last }}
{%- endfor %}
}
{%- elif effectGroups.targets.length == 1 -%}
{{j()}}
    {%- if effectGroups.targets[0].condition != null -%}
{{- formatCondition(effectGroups.targets[0]) -}}
    {%- endif -%}
target: {
    {{formatTarget(effectGroups.targets[0]) | indent(4) -}}
    gameAction: {{formatSingleEffect(effectGroups.targets[0]) | indent(4)}}
}
{%- endif -%}
{# Untargetted effects #}
{%- if effectGroups.default.length > 0 -%}
{{- formatCondition(effectGroups.default[0]) -}}{# Should really be splitting a group if any have conditions #}
{{- j()}}gameAction: {{formatEffectArray(effectGroups.default)}}
{%- endif -%}
{# Dependent effects #}
{%- if effectGroups.then.length > 0 -%}
{{j()}}then: {
    {{formatEffects(effectGroups.then, true) | indent(4) }}
}
{%- endif -%}
{# Stuff we can't format yet #}
{%- for unknownEffect in effectGroups.unknown %}
/*Unsupported combinations: {{unknownEffect | dump(2) }}*/
{%- endfor -%}
{%- endmacro -%}

{%- macro formatEffectArray(effects) -%}
{%- if effects.length > 1 -%}
[
    {%- for e in effects %}
    {{ formatSingleEffect(e) | indent(4) }}{{"," if not loop.last }}
    {%- endfor %}
]
{%- elif effects.length == 1 -%}
{{ formatSingleEffect(effects[0]) }}
{%- endif %}
{%- endmacro -%}

{# Targetting options setup #}
{%- macro formatTarget(effect) -%}
{%- if effect.target.mode != "exactly" -%}
mode: '{{effect.target.mode}}',
{% endif -%}
{%- if effect.target.count != 1 -%}
numCards: '{{effect.target.count}}',
{% endif -%}
{%- if effect.target.type != null -%}
cardType: '{{effect.target.type}}',
{% endif -%}
{%- if effect.target.controller != null -%}
controller: '{{effect.target.controller}}',
{% endif -%}
{%- if effect.target.location != null -%}
location: '{{effect.target.location}}',
{% endif -%}
{%- set c = cardConditionInternal(effect.target, effect) -%}
{%- if c.length > 0 -%}
cardCondition: (card{{", context" if c.includes("context") }}) => {{ c }},
{% endif -%}
{%- endmacro -%}

{# Individual effect implementations - mostly just calls the matching function, but
there are some exceptions. #}
{%- macro formatSingleEffect(effect) -%}
    {%- if ['gainAmber','stealAmber','gainChains','draw'].includes(effect.name) -%}
ability.actions.{{effect.name}}({{ formatParams(effect, defaultPlayerTarget='self') }})
    {%- elif ['loseAmber', 'discardAtRandom'].includes(effect.name) -%}
ability.actions.{{effect.name}}({{ formatParams(effect, defaultPlayerTarget='opponent') }})
    {%- elif effect.name == 'gainAbility' -%}
        {%- if effect.ability.name == 'bold' -%}
ability.effects.gainAbility('{{effect.ability.trigger}}', {{ boldAbility(effect.ability) }})
        {%- endif -%}
    {%- elif effect.name == 'gainKeywords' -%}
ability.effects.addKeyword({ 
    {%- for keyword in effect.keywords %}
    {{keyword.name}}: {{keyword.count|default(1, true)}}{{"," if not loop.last }}
    {%- endfor %}
})
    {%- elif effect.name == 'readyAndUse' -%}
ability.actions.sequential([
    ability.actions.ready(),
    ability.actions.use()
])
    {%- elif effect.name == 'readyAndFight' -%}
ability.actions.sequential([
    ability.actions.ready(),
    ability.actions.fight()
])
    {%- elif ['forRemainderOfTurn'].includes(effect.name) -%}
        {%- if effect.durationEffect.name == "reaction" or effect.durationEffect.target == null -%}
ability.actions.{{effect.name}}({{formatParams(effect, allowContext=false)}})
        {%- else -%}
ability.actions.cardLastingEffect({{formatParams(effect.durationEffect)}})
        {%- endif -%}
    {%- elif ['entersPlayReady', 'entersPlayStunned'].includes(effect.name) -%}
ability.effects.{{effect.name}}()
    {%- elif ['modifyPower', 'modifyArmor'].includes(effect.name) -%}
ability.effects.{{effect.name}}({{effect.amount}})
    {%- elif effect.name == 'unknown' -%}
/*{{effect | dump(2) }}*/
    {%- else -%}
ability.actions.{{effect.name}}({{formatParams(effect)}})
    {%- endif -%}
{%- endmacro -%}

{# Parameters #}
{%- macro formatParams(ability, defaultPlayerTarget=null, allowContext=true) -%}
{%- set params = formatParamsInternal(ability, defaultPlayerTarget) -%}
{%- if params.includes("context") and allowContext -%}
(context) => ({
    {{ params | indent(4) }}
})
{%- elif params.includes("\n") -%}{#- This type of check only works at the lowest level.-#}
{
    {{ params | indent(4) }}
}
{%- elif params.length > 0 -%}
{ {{ params }} }
{%- endif -%}
{%- endmacro -%}

{%- macro whenTriggers(trigger) -%}
{%- if trigger.trigger == "reap" -%}
onReap: {{eventCondition(trigger)}}
{%- elif trigger.trigger == "play" -%}
onCardPlayed: {{eventCondition(trigger)}}
{%- elif trigger.trigger == "fight" -%}
onFight: {{eventCondition(trigger, 'event.attacker')}}
{%- elif trigger.trigger == "destroyed" -%}
onCardDestroyed: {{eventCondition(trigger, 'event.clone')}}
{%- else -%}
{{ability.durationEffect | dump(2)}}
{%- endif -%}
{%- endmacro-%}

{%- macro formatParamsInternal(ability, defaultPlayerTarget=null) -%}
{%- set j = joiner(',\n') -%}
{%- if ability.target != null and ability.target.mode == "all" -%}
{{j()}}target: context.game.{{ability.target.type}}sInPlay{{cardFilter(ability.target)}}
{%- endif -%}
{%- if ability.target == "$this" -%}
{{j()}}target: context.source
{%- endif -%}
{%- if ability.target.mode == "trigger" -%}
{{j()}}target: context.event.card
{%- endif -%}
{%- if ability.durationEffect != null -%}
    {%- if ability.durationEffect.name == "reaction" -%}
{{formatReaction(ability.durationEffect)}}
    {%- else -%}
{{ability.durationEffect | dump(2)}}
    {%- endif -%}
{%- endif -%}
{%- if ability.amount != null -%}
{{j()}}amount: {{ability.amount}}
{%- endif -%}
{%- if ability.location != null -%}
{{j()}}location: '{{ability.location}}'
{%- endif -%}
{%- if ability.fully == true -%}
{{j()}}fully: true
{%- endif -%}
{%- if ability.all == true -%}
{{j()}}all: true
{%- endif -%}
{%- set targetPlayer = ability.targetPlayer if ability.targetPlayer else 'self' -%}
{%- if defaultPlayerTarget != null and targetPlayer !== defaultPlayerTarget -%}
    {%- if targetPlayer === 'self' -%}
{{j()}}target: context.player
    {%- elif targetPlayer === 'opponent' -%}
{{j()}}target: context.player.opponent
    {%- elif targetPlayer === 'owner' -%}
{{j()}}target: context.event.card.owner{#Should really have context-based card variable#}
    {%- elif targetPlayer === 'controllerOpponent' -%}
{{j()}}target: context.event.card.controller.opponent
    {%- else -%}
{{j()}}target: /* {{targetPlayer | dump}} */
    {%- endif -%}
{%- endif -%}
{%- if ability.effects != null -%}
{{j()}}effect: {{formatEffectArray(ability.effects) }}
{%- endif -%}
{%- endmacro -%}

{# card condition checks #}
{# Card condition requires context if something checks it #}
{# Card filter already has context #}
{%- macro cardFilter(target) -%}
{%- set c = cardConditionInternal(target, null, true) -%}
{%- if c.length > 0 -%}
.filter(
    (card) => {{c}}
) 
{%- endif -%}
{%- endmacro -%}

{%- macro cardConditionInternal(target, effect=null, checkController = false, checkType = false, card = 'card') -%}
{% set j = joiner(' && ') -%}
{%- if effect != null and effect.name == 'use' -%}
{{j()}}{{card}}.exhausted === false{# Is this required, or inbuilt anyway? #}
{%- endif -%}
{%- if target.controller != null and checkController -%}
{{j()}}{{controllerCondition(target, card)}}
{%- endif -%}
{%- if target.eventPlayer != null -%}
{{j()}}event.player {{ '===' if target.eventPlayer === 'self' else '!==' }} context.player
{%- endif -%}
{%- if target.type != null and checkType -%}
{{j()}}{{card}}.type === '{{target.type}}'
{%- endif -%}
{%- for c in target.conditions -%}
{{j()}}{{singleCondition(c, card)}}
{%- endfor -%}
{%- endmacro -%}

{# Individual conditions: #}
{%- macro singleCondition(condition, card) -%}
    {%- if condition.name == "not" -%}
!{{singleCondition(condition.condition, card)}}
    {%- elif condition.name == "trait" -%}
{{card}}.hasTrait('{{condition.trait}}')
    {%- elif condition.name == "house" -%}
{{card}}.hasHouse('{{condition.house}}')
    {%- elif condition.name == "flank" -%}
{{card}}.isOnFlank()
    {%- elif condition.name == "hasAmber" -%}
{{card}}.hasToken('amber')
    {%- elif condition.name == "damaged" -%}
{{card}}.hasToken('damage')
    {%- elif condition.name == "neighboring" -%}
context.source.neighbors.includes({{card}})
    {%- elif condition.name == "other" -%}
{{card}} !== context.source
    {%- else -%}
/*{{ effect | dump(2)}}*/
    {%- endif -%}
{%- endmacro -%}

{%- macro controllerCondition(target, card) -%}
{{card}}.controller {{'===' if target.controller === 'self' else '!==' }} context.player
{%- endmacro -%}

{%- macro formatCondition(effect)-%}
{%- if effect.condition == "destroysTarget" -%}
condition: (context) => 
    context.preThenEvent.destroyEvent && context.preThenEvent.destroyEvent.resolved,
{% elif effect.condition != null -%}
condition: /* {{effect.condition | dump(2)}} */
{% endif -%}
{%- endmacro -%}

{%- macro eventCondition(trigger, card = "event.card") -%}
{%- set c = cardConditionInternal(trigger.card, null, true, true, card) -%}
({{"event" if c.includes("event") }}{{", context" if c.includes("context") }}) => {{ c }},
{%- endmacro -%}

{%- macro formatReaction(reaction) -%}
when: {
    {{whenTriggers(reaction.trigger)}}
},
gameAction: {{formatSingleEffect(reaction.effect)}}
{%- endmacro -%}